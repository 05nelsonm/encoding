// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.matthewnelson.encoding:utf8>
open class io.matthewnelson.encoding.utf8/UTF8 : io.matthewnelson.encoding.core/EncoderDecoder<io.matthewnelson.encoding.utf8/UTF8.Config> { // io.matthewnelson.encoding.utf8/UTF8|null[0]
    final fun name(): kotlin/String // io.matthewnelson.encoding.utf8/UTF8.name|name(){}[0]
    final fun newDecoderFeedProtected(io.matthewnelson.encoding.core/Decoder.OutFeed): io.matthewnelson.encoding.core/Decoder.Feed<io.matthewnelson.encoding.utf8/UTF8.Config> // io.matthewnelson.encoding.utf8/UTF8.newDecoderFeedProtected|newDecoderFeedProtected(io.matthewnelson.encoding.core.Decoder.OutFeed){}[0]
    final fun newEncoderFeedProtected(io.matthewnelson.encoding.core/Encoder.OutFeed): io.matthewnelson.encoding.core/Encoder.Feed<io.matthewnelson.encoding.utf8/UTF8.Config> // io.matthewnelson.encoding.utf8/UTF8.newEncoderFeedProtected|newEncoderFeedProtected(io.matthewnelson.encoding.core.Encoder.OutFeed){}[0]

    abstract class ReplacementStrategy { // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy|null[0]
        final val size // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.size|{}size[0]
            final fun <get-size>(): kotlin/Int // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.size.<get-size>|<get-size>(){}[0]

        abstract fun toString(): kotlin/String // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.toString|toString(){}[0]

        final object Companion { // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.Companion|null[0]
            final val KOTLIN // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.Companion.KOTLIN|{}KOTLIN[0]
                final fun <get-KOTLIN>(): io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.Companion.KOTLIN.<get-KOTLIN>|<get-KOTLIN>(){}[0]
            final val THROW // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.Companion.THROW|{}THROW[0]
                final fun <get-THROW>(): io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.Companion.THROW.<get-THROW>|<get-THROW>(){}[0]
            final val U_0034 // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.Companion.U_0034|{}U_0034[0]
                final fun <get-U_0034>(): io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.Companion.U_0034.<get-U_0034>|<get-U_0034>(){}[0]
            final val U_FFFD // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.Companion.U_FFFD|{}U_FFFD[0]
                final fun <get-U_FFFD>(): io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy // io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy.Companion.U_FFFD.<get-U_FFFD>|<get-U_FFFD>(){}[0]
        }
    }

    final class Builder { // io.matthewnelson.encoding.utf8/UTF8.Builder|null[0]
        constructor <init>() // io.matthewnelson.encoding.utf8/UTF8.Builder.<init>|<init>(){}[0]
        constructor <init>(io.matthewnelson.encoding.utf8/UTF8.Config?) // io.matthewnelson.encoding.utf8/UTF8.Builder.<init>|<init>(io.matthewnelson.encoding.utf8.UTF8.Config?){}[0]

        final fun build(): io.matthewnelson.encoding.utf8/UTF8 // io.matthewnelson.encoding.utf8/UTF8.Builder.build|build(){}[0]
        final fun replacement(io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy): io.matthewnelson.encoding.utf8/UTF8.Builder // io.matthewnelson.encoding.utf8/UTF8.Builder.replacement|replacement(io.matthewnelson.encoding.utf8.UTF8.ReplacementStrategy){}[0]
    }

    final class CharPreProcessor { // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor|null[0]
        constructor <init>(io.matthewnelson.encoding.utf8/UTF8) // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.<init>|<init>(io.matthewnelson.encoding.utf8.UTF8){}[0]
        constructor <init>(io.matthewnelson.encoding.utf8/UTF8.Config) // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.<init>|<init>(io.matthewnelson.encoding.utf8.UTF8.Config){}[0]
        constructor <init>(io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy) // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.<init>|<init>(io.matthewnelson.encoding.utf8.UTF8.ReplacementStrategy){}[0]

        final var currentSize // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.currentSize|{}currentSize[0]
            final fun <get-currentSize>(): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.currentSize.<get-currentSize>|<get-currentSize>(){}[0]

        final fun doFinal(): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.doFinal|doFinal(){}[0]
        final fun plus(kotlin/Char) // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.plus|plus(kotlin.Char){}[0]

        final object Companion { // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion|null[0]
            final fun (kotlin.collections/Iterator<kotlin/Char>).sizeUTF8(io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion.sizeUTF8|sizeUTF8@kotlin.collections.Iterator<kotlin.Char>(io.matthewnelson.encoding.utf8.UTF8.ReplacementStrategy){}[0]
            final inline fun (kotlin.collections/Iterator<kotlin/Char>).sizeUTF8(io.matthewnelson.encoding.utf8/UTF8): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion.sizeUTF8|sizeUTF8@kotlin.collections.Iterator<kotlin.Char>(io.matthewnelson.encoding.utf8.UTF8){}[0]
            final inline fun (kotlin.collections/Iterator<kotlin/Char>).sizeUTF8(io.matthewnelson.encoding.utf8/UTF8.Config): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion.sizeUTF8|sizeUTF8@kotlin.collections.Iterator<kotlin.Char>(io.matthewnelson.encoding.utf8.UTF8.Config){}[0]
            final inline fun (kotlin/CharArray).sizeUTF8(io.matthewnelson.encoding.utf8/UTF8): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion.sizeUTF8|sizeUTF8@kotlin.CharArray(io.matthewnelson.encoding.utf8.UTF8){}[0]
            final inline fun (kotlin/CharArray).sizeUTF8(io.matthewnelson.encoding.utf8/UTF8.Config): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion.sizeUTF8|sizeUTF8@kotlin.CharArray(io.matthewnelson.encoding.utf8.UTF8.Config){}[0]
            final inline fun (kotlin/CharArray).sizeUTF8(io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion.sizeUTF8|sizeUTF8@kotlin.CharArray(io.matthewnelson.encoding.utf8.UTF8.ReplacementStrategy){}[0]
            final inline fun (kotlin/CharSequence).sizeUTF8(io.matthewnelson.encoding.utf8/UTF8): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion.sizeUTF8|sizeUTF8@kotlin.CharSequence(io.matthewnelson.encoding.utf8.UTF8){}[0]
            final inline fun (kotlin/CharSequence).sizeUTF8(io.matthewnelson.encoding.utf8/UTF8.Config): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion.sizeUTF8|sizeUTF8@kotlin.CharSequence(io.matthewnelson.encoding.utf8.UTF8.Config){}[0]
            final inline fun (kotlin/CharSequence).sizeUTF8(io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy): kotlin/Long // io.matthewnelson.encoding.utf8/UTF8.CharPreProcessor.Companion.sizeUTF8|sizeUTF8@kotlin.CharSequence(io.matthewnelson.encoding.utf8.UTF8.ReplacementStrategy){}[0]
        }
    }

    final class Config : io.matthewnelson.encoding.core/EncoderDecoder.Config { // io.matthewnelson.encoding.utf8/UTF8.Config|null[0]
        final val replacementStrategy // io.matthewnelson.encoding.utf8/UTF8.Config.replacementStrategy|{}replacementStrategy[0]
            final fun <get-replacementStrategy>(): io.matthewnelson.encoding.utf8/UTF8.ReplacementStrategy // io.matthewnelson.encoding.utf8/UTF8.Config.replacementStrategy.<get-replacementStrategy>|<get-replacementStrategy>(){}[0]
    }

    final object Default : io.matthewnelson.encoding.utf8/UTF8 // io.matthewnelson.encoding.utf8/UTF8.Default|null[0]

    final object ThrowOnInvalid : io.matthewnelson.encoding.utf8/UTF8 // io.matthewnelson.encoding.utf8/UTF8.ThrowOnInvalid|null[0]
}
