public abstract class io/matthewnelson/encoding/core/Decoder {
	public static final field Companion Lio/matthewnelson/encoding/core/Decoder$Companion;
	public synthetic fun <init> (Lio/matthewnelson/encoding/core/EncoderDecoder$Config;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun decodeToByteArray (Ljava/lang/CharSequence;Lio/matthewnelson/encoding/core/Decoder;)[B
	public static final fun decodeToByteArray ([BLio/matthewnelson/encoding/core/Decoder;)[B
	public static final fun decodeToByteArray ([CLio/matthewnelson/encoding/core/Decoder;)[B
	public static final fun decodeToByteArrayOrNull (Ljava/lang/CharSequence;Lio/matthewnelson/encoding/core/Decoder;)[B
	public static final fun decodeToByteArrayOrNull ([BLio/matthewnelson/encoding/core/Decoder;)[B
	public static final fun decodeToByteArrayOrNull ([CLio/matthewnelson/encoding/core/Decoder;)[B
	public final fun getConfig ()Lio/matthewnelson/encoding/core/EncoderDecoder$Config;
	public abstract fun newDecoderFeed (Lio/matthewnelson/encoding/core/Decoder$OutFeed;)Lio/matthewnelson/encoding/core/Decoder$Feed;
}

public final class io/matthewnelson/encoding/core/Decoder$Companion {
	public final fun decodeToByteArray (Ljava/lang/CharSequence;Lio/matthewnelson/encoding/core/Decoder;)[B
	public final fun decodeToByteArray ([BLio/matthewnelson/encoding/core/Decoder;)[B
	public final fun decodeToByteArray ([CLio/matthewnelson/encoding/core/Decoder;)[B
	public final fun decodeToByteArrayOrNull (Ljava/lang/CharSequence;Lio/matthewnelson/encoding/core/Decoder;)[B
	public final fun decodeToByteArrayOrNull ([BLio/matthewnelson/encoding/core/Decoder;)[B
	public final fun decodeToByteArrayOrNull ([CLio/matthewnelson/encoding/core/Decoder;)[B
}

public abstract class io/matthewnelson/encoding/core/Decoder$Feed : io/matthewnelson/encoding/core/EncoderDecoder$Feed {
	public fun <init> (Lio/matthewnelson/encoding/core/Decoder;)V
	public final fun close ()V
	public final fun consume (C)V
	protected abstract fun consumeProtected (C)V
	public final fun isClosed ()Z
	public final fun toString ()Ljava/lang/String;
}

public abstract interface class io/matthewnelson/encoding/core/Decoder$OutFeed {
	public abstract fun output (B)V
}

public abstract class io/matthewnelson/encoding/core/Encoder : io/matthewnelson/encoding/core/Decoder {
	public static final field Companion Lio/matthewnelson/encoding/core/Encoder$Companion;
	public synthetic fun <init> (Lio/matthewnelson/encoding/core/EncoderDecoder$Config;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun encodeToByteArray ([BLio/matthewnelson/encoding/core/Encoder;)[B
	public static final fun encodeToCharArray ([BLio/matthewnelson/encoding/core/Encoder;)[C
	public static final fun encodeToString ([BLio/matthewnelson/encoding/core/Encoder;)Ljava/lang/String;
	public final fun newEncoderFeed (Lio/matthewnelson/encoding/core/Encoder$OutFeed;)Lio/matthewnelson/encoding/core/Encoder$Feed;
	protected abstract fun newEncoderFeedProtected (Lio/matthewnelson/encoding/core/Encoder$OutFeed;)Lio/matthewnelson/encoding/core/Encoder$Feed;
}

public final class io/matthewnelson/encoding/core/Encoder$Companion {
	public final fun encodeToByteArray ([BLio/matthewnelson/encoding/core/Encoder;)[B
	public final fun encodeToCharArray ([BLio/matthewnelson/encoding/core/Encoder;)[C
	public final fun encodeToString ([BLio/matthewnelson/encoding/core/Encoder;)Ljava/lang/String;
}

public abstract class io/matthewnelson/encoding/core/Encoder$Feed : io/matthewnelson/encoding/core/EncoderDecoder$Feed {
	public fun <init> (Lio/matthewnelson/encoding/core/Encoder;)V
	public final fun close ()V
	public final fun consume (B)V
	protected abstract fun consumeProtected (B)V
	protected abstract fun doFinalProtected ()V
	public final fun isClosed ()Z
	public final fun toString ()Ljava/lang/String;
}

public abstract interface class io/matthewnelson/encoding/core/Encoder$OutFeed {
	public abstract fun output (C)V
}

public abstract class io/matthewnelson/encoding/core/EncoderDecoder : io/matthewnelson/encoding/core/Encoder {
	public fun <init> (Lio/matthewnelson/encoding/core/EncoderDecoder$Config;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	protected abstract fun name ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
}

public abstract class io/matthewnelson/encoding/core/EncoderDecoder$Config {
	public static final field Companion Lio/matthewnelson/encoding/core/EncoderDecoder$Config$Companion;
	public final field isLenient Ljava/lang/Boolean;
	public final field lineBreakInterval B
	public final field paddingChar Ljava/lang/Character;
	public fun <init> (Ljava/lang/Boolean;BLjava/lang/Character;)V
	public final fun decodeOutMaxSize (J)J
	public final fun decodeOutMaxSizeOrFail (Lio/matthewnelson/encoding/core/util/DecoderInput;)I
	protected abstract fun decodeOutMaxSizeOrFailProtected (ILio/matthewnelson/encoding/core/util/DecoderInput;)I
	protected abstract fun decodeOutMaxSizeProtected (J)J
	public final fun encodeOutSize (J)J
	protected abstract fun encodeOutSizeProtected (J)J
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public static final fun outSizeExceedsMaxEncodingSizeException (Ljava/lang/Number;Ljava/lang/Number;)Lio/matthewnelson/encoding/core/EncodingSizeException;
	public final fun toString ()Ljava/lang/String;
	protected abstract fun toStringAddSettings (Ljava/lang/StringBuilder;)V
}

public final class io/matthewnelson/encoding/core/EncoderDecoder$Config$Companion {
	public final fun outSizeExceedsMaxEncodingSizeException (Ljava/lang/Number;Ljava/lang/Number;)Lio/matthewnelson/encoding/core/EncodingSizeException;
}

public abstract class io/matthewnelson/encoding/core/EncoderDecoder$Feed {
	public synthetic fun <init> (Lio/matthewnelson/encoding/core/EncoderDecoder$Config;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public abstract fun close ()V
	public final fun doFinal ()V
	protected abstract fun doFinalProtected ()V
	public final fun getConfig ()Lio/matthewnelson/encoding/core/EncoderDecoder$Config;
	public abstract fun isClosed ()Z
}

public class io/matthewnelson/encoding/core/EncodingException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public final fun getMessage ()Ljava/lang/String;
}

public class io/matthewnelson/encoding/core/EncodingSizeException : io/matthewnelson/encoding/core/EncodingException {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
}

public abstract interface annotation class io/matthewnelson/encoding/core/ExperimentalEncodingApi : java/lang/annotation/Annotation {
}

public final class io/matthewnelson/encoding/core/_FeedKt {
	public static final fun use (Lio/matthewnelson/encoding/core/EncoderDecoder$Feed;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
}

public abstract interface annotation class io/matthewnelson/encoding/core/internal/InternalEncodingApi : java/lang/annotation/Annotation {
}

public final class io/matthewnelson/encoding/core/util/DecoderInput {
	public fun <init> (Ljava/lang/CharSequence;)V
	public fun <init> ([B)V
	public fun <init> ([C)V
	public final fun get (I)C
}

public abstract class io/matthewnelson/encoding/core/util/FeedBuffer {
	public static final field Companion Lio/matthewnelson/encoding/core/util/FeedBuffer$Companion;
	public final field blockSize I
	public fun <init> (ILio/matthewnelson/encoding/core/util/FeedBuffer$Flush;Lio/matthewnelson/encoding/core/util/FeedBuffer$Finalize;)V
	public final fun count ()I
	public final fun finalize ()V
	public static final fun truncatedInputEncodingException (I)Lio/matthewnelson/encoding/core/EncodingException;
	public final fun update (I)V
}

public final class io/matthewnelson/encoding/core/util/FeedBuffer$Companion {
	public final fun truncatedInputEncodingException (I)Lio/matthewnelson/encoding/core/EncodingException;
}

public abstract interface class io/matthewnelson/encoding/core/util/FeedBuffer$Finalize {
	public abstract fun invoke (I[I)V
}

public abstract interface class io/matthewnelson/encoding/core/util/FeedBuffer$Flush {
	public abstract fun invoke ([I)V
}

